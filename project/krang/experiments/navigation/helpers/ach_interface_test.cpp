#include <amino.h>
#include <ach.h>
#include <iostream>
#define NDIM 3

using namespace std; 

ach_channel_t channel;

void print_arr_2d(double A[][NDIM], int n)
{
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < NDIM; j++) {
			printf("%2.3lf ", A[i][j]);
		}
		printf("\n");
	}
}

int main(void){

	// define a 2D trajectory container
	const size_t k = 15;
	double traj[k][3] = 
{{ 0.80905879,  3.59975648, -0.02836109},
{ 0.87114745 , 3.59540248 ,-0.14909071},
{ 0.96291232 , 3.57609677 ,-0.32501987},
{ 1.06397176 , 3.53384566 ,-0.53664494},
{ 1.1598891  , 3.46647096 ,-0.76153803},
{ 1.24075556 , 3.37642717 ,-0.99216211},
{ 1.30492222 , 3.27239513 ,-1.03084075},
{ 1.3693099  , 3.16962934 ,-0.95026493},
{ 1.4397229  , 3.07060671 ,-0.98264647},
{ 1.50486064 , 2.96909738 ,-0.98419625},
{ 1.56803524 , 2.87396216 ,-0.99358374},
{ 1.62129939 , 2.79298663 ,-0.98766112},
{ 1.66351914 , 2.72806025 ,-1.00573719},
{ 1.69514298 , 2.67737675 ,-1.03094399},
{ 1.71788907 , 2.6385541  ,-1.06387532}};

// 8
//{{ 0.80883449,  3.60116768, -0.0240556 },
//{ 0.92999279 , 3.58529687 ,-0.27734891},
//{ 1.09541595 , 3.51190948 ,-0.62804401},
//{ 1.23667407 , 3.37180209 ,-1.0092963 },
//{ 1.31910646 , 3.18446159 ,-1.28627503},
//{ 1.382249   , 2.99160743 ,-1.15379405},
//{ 1.4524349  , 2.83026028 ,-1.18664455},
//{ 1.49822044 , 2.71620464 ,-1.19958544}};

// k = 44;
// {{  9.81256771,   6.43834782,   1.68651164},
// {  9.79289722 ,  6.70029402 ,  1.58709812},
// {  9.81609631 ,  7.15818834 ,  1.41640306},
// {  9.93657303 ,  7.66535902 ,  1.2180872 },
// { 10.16459084 ,  8.15619755 ,  1.0113914 },
// { 10.49271202 ,  8.59445381 ,  0.80203056},
// { 10.90555859 ,  8.96692562 ,  0.69370133},
// { 11.33261585 ,  9.33931255 ,  0.73273844},
// { 11.74159718 ,  9.69750118 ,  0.71657598},
// { 12.15565014 , 10.05945206 ,  0.72532725},
// { 12.56586838 , 10.41976738 ,  0.71556169},
// { 12.97747517 , 10.77980232 ,  0.71765381},
// { 13.38914585 , 11.13914871 ,  0.71670586},
// { 13.80128098 , 11.49793148 ,  0.71491891},
// { 14.21424294 , 11.85552597 ,  0.71118784},
// { 14.62880421 , 12.2108717  ,  0.70385367},
// { 15.04642963 , 12.56188297 ,  0.68980682},
// { 15.46804428 , 12.90337849 ,  0.66432327},
// { 15.839118   , 13.18537617 ,  0.62232721},
// { 16.12188148 , 13.37971115 ,  0.56584543},
// { 16.32975578 , 13.50510025 ,  0.50284362},
// { 16.47919846 , 13.58282375 ,  0.44017071},
// { 16.58386803 , 13.62938023 ,  0.38204953},
// { 16.65494728 , 13.65636635 ,  0.33038428},
// { 16.70125008 , 13.6713686  ,  0.2886323 },
// { 16.96722221 , 13.76356983 ,  0.39872327},
// { 17.40098763 , 13.98574162 ,  0.58534122},
// { 17.82938004 , 14.32579136 ,  0.79741937},
// { 18.18667603 , 14.763237   ,  1.01654732},
// { 18.4648571  , 15.23481178 ,  1.02890944},
// { 18.76022911 , 15.68308067 ,  0.95480424},
// { 19.07230568 , 16.14620018 ,  0.98989868},
// { 19.37162971 , 16.59967232 ,  0.9850682 },
// { 19.67332268 , 17.05739021 ,  0.99000454},
// { 19.97255707 , 17.51467133 ,  0.99286991},
// { 20.27037811 , 17.9736557  ,  0.9999395 },
// { 20.56403542 , 18.4358139  ,  1.01347566},
// { 20.85006523 , 18.90361404 ,  1.03755188},
// { 21.09855461 , 19.33827591 ,  1.07702172},
// { 21.27135849 , 19.67449951 ,  1.13015711},
// { 21.38054848 , 19.92025566 ,  1.19140565},
// { 21.44561386 , 20.09522629 ,  1.25376761},
// { 21.48245811 , 20.21654892 ,  1.31234062},
// { 21.50229645 , 20.2981472  ,  1.36471272}};

//		{{9.30745, 18.2198, 0.177269},
//		{9.57616, 18.2562, 0.0729497},
//		{10.0485, 18.2574, -0.104872},
//		{10.5732, 18.1582, -0.309296},
//		{11.0839, 17.9458, -0.521408},
//		{11.5429, 17.6268, -0.735852},
//		{11.9246, 17.216, -0.950988},
//		{12.2101, 16.7327, -1.16632},
//		{12.3857, 16.1994, -1.38169},
//		{12.4524, 15.6427, -1.49534},
//		{12.5081, 15.0926, -1.42137},
//		{12.5848, 14.5485, -1.43786},
//		{12.6569, 14.0056, -1.43759},
//		{12.7299, 13.4637, -1.4387},
//		{12.8007, 12.9217, -1.44431},
//		{12.8686, 12.3794, -1.44939},
//		{12.9308, 11.8558, -1.45889},
//		{12.9752, 11.4406, -1.47421},
//		{13.0023, 11.1389, -1.49332},
//		{13.0174, 10.9235, -1.51363},
//		{13.025, 10.7706, -1.53323},
//		{13.0283, 10.6623, -1.55107}};

//	double traj[k][3] = 
//		{{9.30745, 18.2198, 0.177269},
//		{9.30745, 18.2562, 0.0729497},
//		{9.30745, 18.2574, -0.104872},
//		{9.30745, 18.1582, -0.309296},
//		{9.30745, 17.9458, -0.521408},
//		{9.30745, 17.6268, -0.735852},
//		{9.30745, 17.216, -0.950988},
//		{9.30745, 16.7327, -1.16632},
//		{9.30745, 16.1994, -1.38169},
//		{9.30745, 15.6427, -1.49534},
//		{9.30745, 15.0926, -1.42137},
//		{9.30745, 14.5485, -1.43786},
//		{9.30745, 14.0056, -1.43759},
//		{9.30745, 13.4637, -1.4387},
//		{9.30745, 12.9217, -1.44431},
//		{9.30745, 12.3794, -1.44939},
//		{9.30745, 11.8558, -1.45889},
//		{9.30745, 11.4406, -1.47421},
//		{9.30745, 11.1389, -1.49332},
//		{9.30745, 10.9235, -1.51363},
//		{9.30745, 10.7706, -1.53323},
//		{9.30745, 10.6623, -1.55107}};


	//for(size_t j = 0; j < k; j++) 
	//	for(size_t i = 0; i < 3; i++) 
	//		traj[j][i] = rand() % 10;

	// create the ach channel
	size_t frame_size = 4096;
//	size_t frame_cnt = 10;
//	enum ach_status r = ach_create( "krang_state", frame_cnt, frame_size, NULL );
//	if( ACH_OK != r ) {
//		if (ACH_EEXIST == r)
//			fprintf( stderr, "Channel already exists.\n" );
//		else {
//			fprintf( stderr, "Could not create channel: %s\n", ach_result_to_string(r) );
//			exit(EXIT_FAILURE);
//		}
//	}

	// open the channel
	enum ach_status r = ach_open( &channel, "krang_base_waypts", NULL );
	assert(ACH_OK == r);
	r = ach_flush(&channel);
	
	// test send
	cout << "sending traj: " << endl; 
	print_arr_2d(traj, k);
	r = ach_put( &channel, &traj, sizeof(traj) );
	cout << "traj size: " << sizeof(traj) << endl;
	
	// test receive
//	double rtraj[1][3] = {0};
//	r = ach_get( &channel, &rtraj, sizeof(rtraj), &frame_size, NULL, ACH_O_WAIT );
//	cout << "received traj: " << endl; print_arr_2d(rtraj, 2);

}
